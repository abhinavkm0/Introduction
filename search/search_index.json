{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Environment Setup</li> <li>Quality of Life</li> <li>OpenAI Examples</li> <li>Useful links</li> <li>Chunking Methods</li> </ul>"},{"location":"#project-specific","title":"Project Specific","text":"<ul> <li>Amplity Chatbot</li> </ul>"},{"location":"#setup","title":"Setup","text":"<p>Clone the repo</p> <pre><code>git clone https://github.com/abhinavkm0/Introduction\n</code></pre> <p>Install pipenv</p> <pre><code>python -m pip install pipenv\n</code></pre> <p>Install packages</p> <pre><code>pipenv install\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"contents/Amplity_Starter_Kit/","title":"Amplity Chatbot","text":"<p>Repository</p>"},{"location":"contents/Amplity_Starter_Kit/#overview","title":"Overview:","text":"<p>Local development happens inside Docker. This lets Azure service equivalents like Azurite be run locally.</p> <p>There are a bunch of docker commands inside the <code>Makefile</code>, you can go through them as you wish</p> <p>In general you would make use of the following commands</p>"},{"location":"contents/Amplity_Starter_Kit/#1-start-services","title":"1. Start services","text":"<pre><code>make devb\n</code></pre>"},{"location":"contents/Amplity_Starter_Kit/#2-shutodown","title":"2. Shutodown","text":"<pre><code>make down\n</code></pre>"},{"location":"contents/Amplity_Starter_Kit/#3-get-jwt-token-for-authentication","title":"3. Get JWT Token for Authentication","text":"<pre><code>make token\n</code></pre>"},{"location":"contents/Amplity_Starter_Kit/#requirements","title":"Requirements","text":"<p>You will be needing a Pinecone account for testing locally. Create an account, while creating an index set the embedding model to <code>text-embedding-3-small</code></p> <p>Create an account at ngrok and claim your static domain. This will be passed to Azure Pub Sub. You will receive your own <code>AZURE_PUBSUB_TASK_HUB_NAME</code> and <code>AZURE_PUBSUB_CONVERSATION_HUB_NAME</code></p> <p>Expose your local api using this command</p> <pre><code>ngrok http --url=true-deeply-gazelle.ngrok-free.app 9000\n</code></pre> <p>Here <code>9000</code> is the port of our FastAPI application</p>"},{"location":"contents/Environment_Setup/","title":"Environment Setup","text":"<p>We will be working inside WSL</p> <p>First, install wsl</p> <pre><code>wsl --install\n</code></pre> <p>Install the Ubuntu distro</p> <pre><code>wsl --install -d Ubuntu\n</code></pre> <p>Set the default version to WSL2</p> <pre><code>wsl --set-default-version 2\n</code></pre>"},{"location":"contents/Environment_Setup/#wsl2","title":"WSL2","text":"<p>Now you can enter wsl to open a shell</p> <p></p>"},{"location":"contents/Environment_Setup/#docker-desktop","title":"Docker Desktop","text":"<p>Download and install Docker Desktop</p> <p>Now, enable WSL2 integration  </p>"},{"location":"contents/Environment_Setup/#create-ssh-key","title":"Create SSH Key","text":"<p>Create an SSH Key </p> <pre><code>ssh-keygen -t rsa -b 4096 -C \"email@thoughtminds.io\"\n</code></pre> <p>Add to identity</p> <pre><code>ssh-add ~/.ssh/file_name\n</code></pre> <p>Now copy contents of the <code>.pub</code> file to GitHub SSH Keys</p> <p></p>"},{"location":"contents/Environment_Setup/#install-pyenv","title":"Install pyenv","text":"<pre><code>curl -fsSL https://pyenv.run | bash\n</code></pre> <p>Refer this for setup</p> <p>Zsh users can do this</p> <pre><code>echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.zshrc\necho '[[ -d $PYENV_ROOT/bin ]] &amp;&amp; export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.zshrc\necho 'eval \"$(pyenv init - zsh)\"' &gt;&gt; ~/.zshrc\n</code></pre> <p>Now you can install a python version using pyenv</p> <pre><code>pyenv install 3.10.5\n</code></pre> <p>If this throws an error install gcc</p> <pre><code>sudo apt install -y software-properties-common\n</code></pre> <p>I recommend setting a python version to be the default</p> <pre><code>pyenv global 3.10.5\n</code></pre>"},{"location":"contents/Environment_Setup/#install-pipenv","title":"Install pipenv","text":"<pre><code>python -m pip install pipenv\n</code></pre> <p>To initialize simply run</p> <pre><code>pipenv install\n</code></pre> <p>Once you have a Pipfile, start installing packages</p> <p>Eg:</p> <pre><code>pipenv install tqdm\n</code></pre>"},{"location":"contents/OpenAI_Check_List/","title":"GenAI Check List","text":"<p>Python brush up</p>"},{"location":"contents/OpenAI_Check_List/#openai","title":"OpenAI \u2705","text":"<ol> <li>Chat Completion API</li> <li>Implement Structured Output</li> <li>Implement Tool Calling</li> <li>Implement Streaming</li> <li>Implement Assistant</li> <li>Response API</li> <li>Chaining of response</li> </ol> <p>Notebook</p>"},{"location":"contents/OpenAI_Check_List/#concepts","title":"Concepts","text":"<ol> <li>Using OpenAI + VectorDatabase create basic RAG setup (chat on top of PDF) - Notebook \u2705</li> <li>Learn all Chunking &amp; Retrieval Strategy \u2705</li> <li>Basic &amp; Advanced Prompting Techniques \u2705</li> </ol>"},{"location":"contents/Quality_Of_Life/","title":"Quality Of Life","text":"<p>The following are entirely optional</p>"},{"location":"contents/Quality_Of_Life/#zsh","title":"ZSH","text":"<p>Install Zsh</p> <pre><code>sudo apt-get install zsh\n</code></pre> <p>Install OhMyZsh</p> <pre><code>sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n</code></pre> <p>You can configure your .zshrc as you wish</p> <pre><code>nano ~/.zshrc\n</code></pre> <p></p>"},{"location":"contents/Quality_Of_Life/#git-aliases","title":"Git Aliases","text":"<p>Add your favorite git aliases, reference and this</p>"},{"location":"contents/Resources/","title":"Resources","text":"<ol> <li>Chunking - https://masteringllm.medium.com/11-chunking-strategies-for-rag-simplified-visualized-df0dbec8e373 \u2705</li> <li>RAG Techniques - https://github.com/NirDiamant/RAG_Techniques/blob/main/all_rag_techniques/contextual_chunk_headers.ipynb \u2705</li> <li>Markdown Splitter - https://python.langchain.com/docs/how_to/markdown_header_metadata_splitter/ \u2705</li> </ol>"}]}